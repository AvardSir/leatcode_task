class Solution {
    /**
     * @param {number[][]} grid
     */
    islandsAndTreasure(grid) {
        function ifIJExist(i, j) {
            let curI = i
            let curJ = j
            if (curI < 0 || curJ < 0 || curI > grid.length - 1 || curJ > grid[0].length - 1 || grid[curI][curJ] == -1) {
                return false
            }
            else {
                return true
            }
        }
        function dfs(i, j) {
            if (!ifIJExist(i, j)) {
                return Infinity
            }
            if (grid[i][j] < 2147483647) {
                return grid[i][j]
            }
            grid[i][j] = - 1

            let leftVal = [i, j - 1]
            let rightVal = [i, j + 1]
            let upVal = [i - 1, j]
            let downVal = [i + 1, j]


            function ArtoDfs(ar, func) {
                let l = ar[0]
                let r = ar[1]
                return func(l, r)
            }

            let left = ArtoDfs(leftVal, dfs) + 1
            let right = ArtoDfs(rightVal, dfs) + 1
            let up = ArtoDfs(upVal, dfs) + 1
            let down = ArtoDfs(downVal, dfs) + 1

            let curVal = Math.min(left, right, up, down)
            grid[i][j] = curVal

            let arAlIJ = [leftVal, rightVal, upVal, downVal]
            for (let z = 0; z < arAlIJ.length; z++) {
                const elArAlIJ = arAlIJ[z];

                let curI = elArAlIJ[0]
                let curJ = elArAlIJ[1]

                if (ifIJExist(curI, curJ)) {
                    let tempVal = grid[curI][curJ]


                    if (curVal + 1 < tempVal) {
                        // TODO: вроде сделал что дальше надо думать
                        grid[curI][curJ] = 2147483647
                        dfs(curI, curJ)
                    }
                }

            }




            return curVal


        }
        for (let i = 0; i < grid.length; i++) {
            // const element = grid[i];
            for (let j = 0; j < grid[0].length; j++) {
                const element = grid[i][j];

                dfs(i, j)

            }

        }

        return grid
    }
}


class Node {
    constructor(val = 0, neighbors = []) {
        this.val = val;
        this.neighbors = neighbors;
    }
}
let sol = new Solution()

grid = [[2147483647, -1, 0, 2147483647], [2147483647, 2147483647, 2147483647, -1], [2147483647, -1, 2147483647, -1], [0, -1, 2147483647, 2147483647]]

grid = [[2147483647, 2147483647, 2147483647], [2147483647, -1, 2147483647], [0, 2147483647, 2147483647]]

grid = [[0, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647], [-1, -1, -1, -1, 2147483647, -1, -1, -1, -1, -1, -1, 2147483647, -1, -1, -1], [2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647], [2147483647, -1, -1, -1, -1, 2147483647, -1, -1, -1, -1, -1, 2147483647, -1, -1, -1], [2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647], [2147483647, -1, -1, -1, -1, 2147483647, -1, -1, -1, -1, -1, 2147483647, -1, -1, -1], [2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647], [2147483647, -1, -1, -1, -1, 2147483647, -1, -1, -1, -1, -1, 2147483647, -1, -1, -1], [2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647], [2147483647, -1, -1, -1, -1, 2147483647, -1, -1, -1, -1, -1, 2147483647, -1, -1, -1], [2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647], [2147483647, -1, -1, -1, -1, 2147483647, -1, -1, -1, -1, -1, 2147483647, -1, -1, -1], [2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647], [2147483647, -1, -1, -1, -1, 2147483647, -1, -1, -1, -1, -1, 2147483647, -1, -1, -1], [2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647], [2147483647, -1, -1, -1, -1, 2147483647, -1, -1, -1, -1, -1, 2147483647, -1, -1, -1], [2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647], [2147483647, -1, -1, -1, -1, 2147483647, -1, -1, -1, -1, -1, 2147483647, -1, -1, -1], [2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647], [0, -1, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647]]
// grid.length

console.log(' ::: ', sol.islandsAndTreasure(grid));