class Solution {
    /**
     * @param {number[][]} grid
     */
    islandsAndTreasure(grid) {
        function checkIJ(i, j) {
            if (i < 0 || j < 0 || i > grid.length - 1 || j > grid[0].length - 1 || grid[i][j] == -1) {
                return false
            }
            else {
                return true
            }
        }
        function dfs(i, j, dist) {
            if (!checkIJ(i, j)) {
                return
            }

            if (grid[i][j] < 2147483647) {
                if (dist < grid[i][j] || dist == 0) {

                }
                else {
                    return
                }

            }
            grid[i][j] = dist

            dfs(i, j + 1, dist + 1)
            dfs(i + 1, j, dist + 1)
            dfs(i, j - 1, dist + 1)
            dfs(i - 1, j, dist + 1)





        }

        for (let i = 0; i < grid.length; i++) {
            // const element = grid[i];
            for (let j = 0; j < grid[0].length; j++) {
                const element = grid[i][j];


                if (element == 0) {
                    dfs(i, j, 0)
                }
            }

        }

        return grid
    }
}


class Node {
    constructor(val = 0, neighbors = []) {
        this.val = val;
        this.neighbors = neighbors;
    }
}
let sol = new Solution()

grid = [[2147483647, -1, 0, 2147483647], [2147483647, 2147483647, 2147483647, -1], [2147483647, -1, 2147483647, -1], [0, -1, 2147483647, 2147483647]]

grid = [[2147483647, 2147483647, 2147483647], [2147483647, -1, 2147483647], [0, 2147483647, 2147483647]]

// grid = [[0, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647], [-1, -1, -1, -1, 2147483647, -1, -1, -1, -1, -1, -1, 2147483647, -1, -1, -1], [2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647], [2147483647, -1, -1, -1, -1, 2147483647, -1, -1, -1, -1, -1, 2147483647, -1, -1, -1], [2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647], [2147483647, -1, -1, -1, -1, 2147483647, -1, -1, -1, -1, -1, 2147483647, -1, -1, -1], [2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647], [2147483647, -1, -1, -1, -1, 2147483647, -1, -1, -1, -1, -1, 2147483647, -1, -1, -1], [2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647], [2147483647, -1, -1, -1, -1, 2147483647, -1, -1, -1, -1, -1, 2147483647, -1, -1, -1], [2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647], [2147483647, -1, -1, -1, -1, 2147483647, -1, -1, -1, -1, -1, 2147483647, -1, -1, -1], [2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647], [2147483647, -1, -1, -1, -1, 2147483647, -1, -1, -1, -1, -1, 2147483647, -1, -1, -1], [2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647], [2147483647, -1, -1, -1, -1, 2147483647, -1, -1, -1, -1, -1, 2147483647, -1, -1, -1], [2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647], [2147483647, -1, -1, -1, -1, 2147483647, -1, -1, -1, -1, -1, 2147483647, -1, -1, -1], [2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647], [0, -1, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647]]
// grid.length

console.log(' ::: ', sol.islandsAndTreasure(grid));